import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useEffect, useState, useRef } from 'react';
import { ethers } from 'ethers';
import ABI from '../utils/WavePortal.json';
import 'nprogress/nprogress.css';
import nProgress from 'nprogress';

export default function Home() {
	// Just a state variable we use to store our user's public wallet address
	const [currAccount, setCurrentAccount] = useState('');
	const contractAddress = '0x7c2f0320523e80Db05b85c6c936f3f37Ea917aAB';
	const contractABI = ABI.abi;
	const [countWaves, setCountWaves] = useState(0);
	const [allWaves, setAllWaves] = useState([]);
	const message = useRef(null);

	const getAllWaves = async () => {
		const provider = new ethers.providers.Web3Provider(window.ethereum);
		const signer = provider.getSigner();
		const wavePortalContract = new ethers.Contract(
			contractAddress,
			contractABI,
			signer
		);

		let waves = await wavePortalContract.getAllWaves();

		let wavesCleaned = [];
		waves.forEach((wave) => {
			wavesCleaned.push({
				address: wave.waver,
				timestamp: new Date(wave.timestamp * 1000).toLocaleString(),
				message: wave.message,
			});
		});
		setAllWaves(wavesCleaned);
		wavePortalContract.on('NewWave', (from, timestamp, message) => {
			console.log('NewWave', from, timestamp, message);
			setAllWaves((oldArray) => [
				...oldArray,
				{
					address: from,
					timestamp: new Date(timestamp * 1000),
					message: message,
				},
			]);
		});
	};

	const checkIfWalletIsConnected = () => {
		// First make sure we have access to window.ethereum
		const { ethereum } = window;
		if (!ethereum) {
			console.log(
				'Make sure you have MetaMask installed and logged in to your browser'
			);
			return;
		} else {
			// Now check if we are connected to the ethereum network
			// console.log('We have the ethereum object', ethereum);
		}
		// Check if we are authorized to access the user's wallet
		ethereum.request({ method: 'eth_accounts' }).then((accounts) => {
			// We could have multiple accounts. Check for one.
			if (accounts.length !== 0) {
				// Grab the first account we have access to.
				const account = accounts[0];
				// console.log('Found an authorized account: ', account);

				// Store the users public wallet address for later!
				setCurrentAccount(account);
				getAllWaves();
			} else {
				console.log('No authorized accounts found');
			}
		});
	};

	const connectWallet = () => {
		const { ethereum } = window;
		if (!ethereum) {
			alert('Get metamask!');
		}
		ethereum
			.request({ method: 'eth_requestAccounts' })
			.then((accounts) => {
				// console.log('Connected', accounts[0]);
				setCurrentAccount(accounts[0]);
			})
			.catch((err) => {
				console.log('Error', err);
			});
	};

	const wave = async (message) => {
		const provider = new ethers.providers.Web3Provider(window.ethereum);
		const signer = provider.getSigner();
		const wavePortalContract = new ethers.Contract(
			contractAddress,
			contractABI,
			signer
		);

		let count = await wavePortalContract.getTotalWaves();
		// console.log('Retreived total wave count...', count.toNumber());

		const waveTxn = await wavePortalContract.wave(message);
		// console.log('Mining...', waveTxn.hash);
		nProgress.start();
		await waveTxn.wait();
		// console.log('Mined -- ', waveTxn.hash);
		nProgress.done();
		// reload the page
		window.location.reload();
		count = await wavePortalContract.getTotalWaves();
		// console.log('Retreived total wave count ...', count.toNumber());
		setCountWaves(count.toNumber());
	};

	const handleWave = async (event) => {
		event.preventDefault();
		// console.log(message.current.value);
		wave(message.current.value, { gasLimit: 300000 });
	};

	// This runs when the page loads
	useEffect(() => {
		checkIfWalletIsConnected();
	}, []);

	return (
		<div className={styles.container}>
			<Head>
				<title>Just Share</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className={styles.dataContainer}>
				<div className={styles.header}>
					Welcome to Just Share on Web3!
				</div>
				{/* <br /> */}
				{/* <div className={styles.header}></div> */}

				<div className={styles.bio}>Just share. Anything you want.</div>

				<div className={styles.bio}>
					Favorite quote? song? poem? book? <b>Anything</b>. Whatever
					you share will be stored on the blockchain <b>faaheva! </b>{' '}
					ðŸ¤¯{' '}
					<a href="https://rinkeby.etherscan.io/address/0x7c2f0320523e80Db05b85c6c936f3f37Ea917aAB">
						Check it out here ðŸ‘‰ ðŸ”—
					</a>
				</div>
				<div className={styles.bio}>
					Connect a Crypto Wallet like <b>Metamask</b> to authenticate
					yourself on this amazing blockchain app. Btw I will send a
					<b> lucky winners</b> some free <b>fake</b> ETH once you
					share something here ðŸ˜‰
				</div>
				<input
					className={styles.TextField}
					placeholder="Enter your message here"
					ref={message}
				></input>
				<form onSubmit={handleWave}>
					<div className={styles.grid}>
						<button className={styles.waveButton} type="submit">
							Just Share
						</button>
						<button
							className={styles.connectWallet}
							onClick={connectWallet}
						>
							Connect Wallet
						</button>
					</div>
				</form>
				<div className={styles.description}>
					{allWaves.length} Messages ðŸ“¥
				</div>
				<div className={styles.box}>
					{allWaves
						.map((wave, index) => {
							return (
								<div key={index}>
									<div className={styles.code}>
										<p>Address: {wave.address}</p>
										<p>Time: {wave.timestamp.toString()}</p>
										<p>Message: {wave.message}</p>
									</div>
								</div>
							);
						})
						.reverse()}
				</div>
			</div>
		</div>
	);
}
